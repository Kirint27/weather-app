{"version":3,"sources":["containers/TodaysDate/TodaysDate.module.scss","componenets/SearchBar/SearchBar.module.scss","componenets/SearchBar/SearchBar.jsx","containers/TodaysDate/TodaysDate.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["module","exports","SearchBar","props","updateSearchText","query","search","_jsx","className","children","type","placeholder","onChange","e","target","value","onKeyPress","TodaysDate","styles","date","d","day","getDay","getDate","month","getMonth","year","getFullYear","concat","dateBuilder","Date","api","App","_useState","useState","_useState2","_slicedToArray","setQuery","_useState3","_useState4","weather","setWeather","_jsxs","searchTerm","fetch","then","res","json","result","console","log","catch","err","main","class","name","sys","country","description","Math","round","temp","feels_like","clouds","all","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e13dd93b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"date\":\"TodaysDate_date__2lvC7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search-box\":\"SearchBar_search-box__18KoZ\"};","import React, { useState } from \"react\";\nimport styles from \"./SearchBar.module.scss\";\n\nconst SearchBar = (props) => {\n\nconst{updateSearchText, query,search} = props;\n\n  \n  return (\n    <div className=\"search-box\">\n    <input\n      type=\"text\"\n      className=\"search-bar\"\n      placeholder=\"Search city...\"\n      onChange={(e) => updateSearchText(e.target.value)}\n       value={query}\n       onKeyPress={search}\n    />\n  </div>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport styles from \"./TodaysDate.module.scss\";\n\nconst TodaysDate = () => {\n\n    \n    const dateBuilder = (d) => {\n      let months = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n      ];\n      let days = [\n        \"Sunday\",\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\",\n      ];\n      let day = days[d.getDay()];\n      let date = d.getDate();\n      let month = months[d.getMonth()];\n      let year = d.getFullYear();\n  \n      return `${day} ${date} ${month} ${year}`;\n    };\n  \n    return (\n\n         <div className={styles.date}>{dateBuilder(new Date())}</div>\n  \n    );\n  };\n  \n \nexport default TodaysDate;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./componenets/SearchBar/SearchBar\";\nimport TodaysDate from \"./containers/TodaysDate/TodaysDate\";\nconst api = {\n  key: \"4d359c0d2e6fab4b2f48f359d1dd6118\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nconst App = () => {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  \n\n  const search = (searchTerm) => {\n    // if (event.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${searchTerm}&units=metric&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n            setQuery(\"\");\n          console.log(result);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n\n\n  \n\n  return (\n  \n      <main>\n        <h1>Weather App</h1>\n        <h2>Search for todays weather</h2>\n        <TodaysDate />\n        <SearchBar updateSearchText={search} />\n        {typeof weather.main != \"undefined\" ? (\n          <div class=\"text\">\n            <div className=\"weather-box\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n                <div className=\"weather\">\n                  {\" \"}\n                  <p class=\"description\">{weather.weather[0].description}</p>\n                </div>\n              </div>\n\n              <div className=\"temp\">\n                {\" \"}\n                Current temp{\" \"}\n                <p class=\"description\">{Math.round(weather.main.temp)}°c</p>\n              </div>\n              <div className=\"feelsLike\">\n                Feels like{\" \"}\n                <p class=\"description\">\n                  {Math.round(weather.main.feels_like)}°c\n                </p>\n              </div>\n              <div className=\"feelsLike\">\n                Cloud cover<p class=\"description\">{weather.clouds.all}%</p>\n              </div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </main>\n    \n    \n  );\n };\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}