{"version":3,"sources":["componnets/WeatherCard/WeatherCard.module.scss","componnets/Weather/Weather.module.scss","componnets/SearchBar/SearchBar.module.scss","containers/TodaysDate/TodaysDate.module.scss","componnets/SearchBar/SearchBar.jsx","componnets/WeatherCard/WeatherCard.jsx","componnets/Weather/Weather.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["module","exports","api","process","SearchBar","_ref","setWeather","setForecast","setError","_useState","useState","_useState2","_slicedToArray","searchTerm","setSearchTerm","_useState3","_useState4","city","setCity","_useState5","_useState6","setQuery","_useState7","_useState8","country","setCountry","_jsxs","_Fragment","children","_jsx","className","styles","searchBox","type","searchBar","placeholder","onChange","e","target","value","onKeyDown","key","fetch","concat","then","res","ok","Error","json","currentWeatherData","name","sys","console","log","_currentWeatherData$c","coord","lat","lon","forecastData","catch","err","WeatherCard","date","time","temp","weatherDescription","icon","precipitationProbability","weatherBox","weather","description","src","alt","cloudCover","Weather","forecast","expandedDay","setExpandedDay","groupedForecast","list","reduce","dailyForecasts","item","Date","dt","toLocaleDateString","push","weatherContainer","Object","keys","length","map","dayData","dayCard","onClick","handleDayClick","hourlyForecast","index","toLocaleTimeString","hour","minute","Math","round","main","pop","toFixed","App","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa8e60e4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"WeatherCard_text__1p_D0\",\"weatherBox\":\"WeatherCard_weatherBox__2TEqr\",\"location\":\"WeatherCard_location__2nDqr\",\"weather\":\"WeatherCard_weather__3nhbd\",\"temp\":\"WeatherCard_temp__sxY29\",\"feelsLike\":\"WeatherCard_feelsLike__1v5NJ\",\"cloudCover\":\"WeatherCard_cloudCover__24Ff0\",\"description\":\"WeatherCard_description__ddqVy\",\"error\":\"WeatherCard_error__pTlY_\",\"weatherContainer\":\"WeatherCard_weatherContainer__c6ccL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Weather_text__1aw5u\",\"weatherContainer\":\"Weather_weatherContainer__2qyh3\",\"location\":\"Weather_location__2qBHh\",\"weather\":\"Weather_weather__3tWMy\",\"temp\":\"Weather_temp__3_G75\",\"feelsLike\":\"Weather_feelsLike__2ocww\",\"cloudCover\":\"Weather_cloudCover__3dPUj\",\"description\":\"Weather_description__1FH9e\",\"error\":\"Weather_error__4QtWl\",\"dayCards\":\"Weather_dayCards__3lhm8\",\"date\":\"Weather_date__2wmaE\",\"dayCard\":\"Weather_dayCard__3SOpB\",\"hourlyForecast\":\"Weather_hourlyForecast__1OcwY\",\"weatherBox\":\"Weather_weatherBox__7CNW6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBox\":\"SearchBar_searchBox__3It0z\",\"searchBar\":\"SearchBar_searchBar__1qene\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"date\":\"TodaysDate_date__2lvC7\"};","import React, { useState } from \"react\";\nimport styles from \"./SearchBar.module.scss\";\n\nconst api = {\n  key: process.env.REACT_APP_API_KEY,\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\nconst SearchBar = ({ setWeather, setForecast, setError }) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [city, setCity] = useState(\"\"); // State for the city name\nconst[query,setQuery] = useState(\"\")\nconst[country,setCountry] = useState(\"\")\n  const search = () => {\n    if (!searchTerm) return; // Validate input\n\n    // Fetch current weather data\n    fetch(`${api.base}weather?q=${searchTerm}&appid=${api.key}&units=metric`)\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(\"City not found\"); // Handle error\n        }\n        return res.json();\n      })\n      .then((currentWeatherData) => {\n        setWeather(currentWeatherData);\n        setCity(currentWeatherData.name);\n        setCountry(currentWeatherData.sys.country);\n        setSearchTerm(\"\"); // Clear the search input\n        setError(null); // Clear any previous errors\n   // Set current weather data\nconsole.log(currentWeatherData)\n        // Now fetch the forecast data using latitude and longitude\n        const {\n          coord: { lat, lon },\n        } = currentWeatherData;\n        return fetch(\n          `${api.base}forecast?lat=${lat}&lon=${lon}&appid=${api.key}&units=metric`\n        );\n      })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(\"Forecast data not available\"); // Handle error\n        }\n        return res.json();\n      })\n      .then((forecastData) => {\n        setForecast(forecastData); // Set forecast data\n        setQuery(\"\"); // Clear the search input\n\n      })\n      .catch((err) => {\n        setWeather(null); // Reset weather state on error\n        setForecast(null); // Reset forecast state on error\n\n        setError(null); // Clear any previous errors\n   // Set error message for user feedback\n      });\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      search(); // Call search function on Enter key press\n    }\n  };\n\n\n  return (\n    <>\n    <div className={styles.searchBox}>\n      <input\n        type=\"text\"\n        className={styles.searchBar}\n        placeholder=\"Search city...\"\n        onChange={(e) => setSearchTerm(e.target.value)} // Update search text\n        onKeyDown={handleKeyDown} // Attach key down event\n        value={searchTerm} // Controlled input value linked to searchTerm\n      />\n    </div>\n    <h2>{city} {country}</h2>\n    </>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport styles from \"./WeatherCard.module.scss\"; // Ensure the path is correct\n\nconst WeatherCard = ({ date, time, temp, weatherDescription, icon, precipitationProbability }) => {\n  return (\n    <div className={styles.weatherBox}>\n      <h4>{date}</h4>\n      <p>{time}</p>\n      <div className={styles.weather}>\n        <p className={styles.description}>{weatherDescription}</p>\n        <img src={`http://openweathermap.org/img/wn/${icon}.png`} alt={weatherDescription} className={styles.icon} />\n      </div>\n      <div className={styles.temp}>\n        <p>Temperature: {temp}°C</p>\n      </div>\n      <div className={styles.cloudCover}>\n        Probability of rain: {precipitationProbability}%\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherCard;\n","import React, { useState } from \"react\";\nimport styles from \"./Weather.module.scss\"; // Ensure this path is correct\nimport WeatherCard from \"../WeatherCard/WeatherCard\";\n\nconst Weather = ({ forecast }) => {\n  const [expandedDay, setExpandedDay] = useState(null);\n\n  // Group forecast data by day\n  const groupedForecast = forecast.list.reduce((dailyForecasts, item) => {\n    const date = new Date(item.dt * 1000).toLocaleDateString();\n    if (!dailyForecasts[date]) {\n      dailyForecasts[date] = [];\n    }\n    dailyForecasts[date].push(item);\n    return dailyForecasts;\n  }, {});\n\n  const handleDayClick = (date) => {\n    setExpandedDay(expandedDay === date ? null : date);\n  };\n\n  return (\n    <div className={styles.weatherContainer}>\n      {Object.keys(groupedForecast).length > 0 ? (\n        Object.keys(groupedForecast).map((date) => {\n          const dayData = groupedForecast[date];\n\n          return (\n            <div key={date}>\n              <div\n                className={styles.dayCard}\n                onClick={() => handleDayClick(date)}\n              >\n                <h3 styles={styles.date}>{date}</h3>\n              </div>\n              {expandedDay === date && (\n                <div className={styles.hourlyForecast}>\n                  {dayData.map((item, index) => {\n                    const time = new Date(item.dt * 1000).toLocaleTimeString(\n                      [],\n                      {\n                        hour: \"2-digit\",\n                        minute: \"2-digit\",\n                      }\n                    );\n                    const temp = Math.round(item.main.temp);\n                    const precipitationProbability = item.pop\n                      ? (item.pop * 100).toFixed(0)\n                      : 0;\n                    const weatherDescription = item.weather[0].description;\n                    const icon = item.weather[0].icon;\n                    return (\n                      <WeatherCard\n                        key={index}\n                        date={time} // Show time here\n                        temp={temp}\n                        weatherDescription={weatherDescription}\n                        icon={icon}\n                        precipitationProbability={precipitationProbability}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })\n      ) : (\n        <p>No weather data available.</p> // Fallback message when no data is available\n      )}\n    </div>\n  );\n};\nexport default Weather;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./componnets/SearchBar/SearchBar\";\nimport TodaysDate from \"./containers/TodaysDate/TodaysDate\";\nimport Weather from \"./componnets/Weather/Weather\";\n\nconst App = () => {\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState(null); // State for forecast data\n  const [error, setError] = useState(null); // State for error handling\n\n  return (\n    <main>\n      <h1>Weather for next 5 days </h1>\n      <SearchBar\n        setWeather={setWeather}\n        setForecast={setForecast}\n        setError={setError}\n      />{\" \"}\n      {/* Pass state setters */}\n      {error && <p className=\"error\">{error}</p>} {/* Display error message */}\n      {weather && forecast && (\n        <Weather weather={weather} forecast={forecast} />\n      )}{\" \"}\n      {/* Pass both weather and forecast */}\n    </main>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}